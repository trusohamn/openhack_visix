{"version":3,"sources":["MapChart.js","index.js"],"names":["colorScale2D","corruption","investment","hex","rgbHex","console","log","MapChart","useState","data","setData","useEffect","csv","then","projectionConfig","rotate","scale","stroke","strokeWidth","length","geography","geographies","map","geo","d","find","s","ISO3","properties","ISO_A3","key","rsmKey","fill","rootElement","document","getElementById","ReactDOM","render"],"mappings":"4MAoBMA,EAAe,SAACC,EAAYC,GAChC,IAAMC,EAAMC,IAAO,IAAMH,EAAY,EAAG,IAAMC,GAE9C,OADAG,QAAQC,IAAIH,GACL,IAAMA,GA6CAI,EA1CE,WAAO,IAAD,EACGC,mBAAS,IADZ,mBACdC,EADc,KACRC,EADQ,KASrB,OANAC,qBAAU,WACRC,YAAI,mBAAmBC,MAAK,SAAAJ,GAC1BC,EAAQD,QAET,IAGD,kBAAC,gBAAD,CACEK,iBAAkB,CAChBC,OAAQ,EAAE,GAAI,EAAG,GACjBC,MAAO,MAGT,kBAAC,SAAD,CAAQC,OAAO,UAAUC,YAAa,KACtC,kBAAC,YAAD,CAAWD,OAAO,UAAUC,YAAa,KACxCT,EAAKU,OAAS,GACb,kBAAC,cAAD,CAAaC,UAhCnB,2GAiCS,qBAAGC,YACUC,KAAI,SAAAC,GACd,IAAMC,EAAIf,EAAKgB,MAAK,SAAAC,GAAC,OAAIA,EAAEC,OAASJ,EAAIK,WAAWC,UACnD,OACE,kBAAC,YAAD,CACEC,IAAKP,EAAIQ,OACTX,UAAWG,EACXS,KACER,EACIxB,EAAawB,EAAC,WAAgBA,EAAC,YAC/B,oBCzCxB,IAAMS,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,mBAThB,WACE,OACE,6BACE,kBAAC,EAAD,SAMU,MAASJ,I","file":"static/js/main.366f75b4.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { csv } from \"d3-fetch\";\nimport { scaleLinear } from \"d3-scale\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Sphere,\n  Graticule\n} from \"react-simple-maps\";\nimport rgbHex from \"rgb-hex\";\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\n/*\nconst colorScale = scaleLinear()\n  .domain([0.29, 0.68])\n  .range([\"#000000\", \"#ffffff\"]);\n*/\nconst colorScale2D = (corruption, investment) => {\n  const hex = rgbHex(255 * corruption, 0, 255 * investment);\n  console.log(hex);\n  return \"#\" + hex;\n};\n\nconst MapChart = () => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    csv(`/corruption.csv`).then(data => {\n      setData(data);\n    });\n  }, []);\n\n  return (\n    <ComposableMap\n      projectionConfig={{\n        rotate: [-10, 0, 0],\n        scale: 147\n      }}\n    >\n      <Sphere stroke=\"#E4E5E6\" strokeWidth={0.5} />\n      <Graticule stroke=\"#E4E5E6\" strokeWidth={0.5} />\n      {data.length > 0 && (\n        <Geographies geography={geoUrl}>\n          {({ geographies }) =>\n            geographies.map(geo => {\n              const d = data.find(s => s.ISO3 === geo.properties.ISO_A3);\n              return (\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  fill={\n                    d\n                      ? colorScale2D(d[\"corruption\"], d[\"investment\"])\n                      : \"#F5F4F6\"\n                  }\n                />\n              );\n            })\n          }\n        </Geographies>\n      )}\n    </ComposableMap>\n  );\n};\n\nexport default MapChart;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles.css\";\n\nimport MapChart from \"./MapChart\";\n\nfunction App() {\n  return (\n    <div>\n      <MapChart />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}