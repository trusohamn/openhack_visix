{"version":3,"sources":["components/Legend2d.js","components/Tooltip.js","components/Details.js","components/MapChart.js","components/Stats.js","index.js"],"names":["SVG","r","g","b","style","fill","width","className","viewBox","fillFunction","rects","x","y","rect","height","key","push","xmlns","xmlnsXlink","id","refX","refY","markerWidth","markerHeight","orient","d","transform","points","stroke","strokeWidth","markerStart","markerEnd","fontSize","textAnchor","fontWeight","DataTooltip","name","corruption","investment","corruption_color","investment_color","data_corruption","value","data_investment","COLORS1","COLORS2","display","justifyContent","flexDirection","data","cx","cy","innerRadius","outerRadius","paddingAngle","isAnimationActive","map","entry","index","length","dy","Number","toFixed","removeKeys","countryCode","countryData","find","country","CountryCode","heigth","Object","keys","filter","includes","colorScale2D","color","G","B","R","rgbHex","MapChart","setTooltipContent","dataset","setCountry","setData","useEffect","csv","process","then","maxFunding","Math","max","forEach","data-tip","projectionConfig","rotate","scale","disablePanning","geography","geographies","geo","s","properties","ISO_A3","rsmKey","onClick","onMouseEnter","Tooltip","NAME","onMouseLeave","default","outline","hover","cursor","pressed","coordinates","Legend2d","Details","SingleStat","label","displayDetails","mostCorrupted","sort","c1","c2","slice","mostInvested","lessInvested","upperFirst","string","charAt","toUpperCase","substring","rootElement","document","getElementById","ReactDOM","render","useState","content","setContent","setKey","Tabs","activeKey","onSelect","k","sector","Tab","eventKey","title","Stats"],"mappings":"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","file":"static/js/main.8debd38a.chunk.js","sourcesContent":["import React from \"react\";\n\nconst SVG = ({\n  style = {},\n  fill = \"#000\",\n  width = \"100%\",\n  className = \"\",\n  viewBox = \"0 0 10 6\",\n  fillFunction\n}) => {\n  let rects = [];\n\n  const scale = 1;\n\n  const rgb = (r, g, b) => {\n    return `rgb(${r},${g},${b})`;\n  };\n\n  for (let x = 0; x < 5; x++) {\n    for (let y = 0; y < 5; y++) {\n      let rect = (\n        <rect\n          width={0.95 * scale}\n          height={0.95 * scale}\n          fill={\n            fillFunction\n              ? fillFunction(x / 4, 1 - y / 4)\n              : rgb(100 + (x / 4) * 155, 0, 255 - (y / 4) * 155)\n          }\n          x={x * scale}\n          y={y * scale}\n          key={`${y}x${x}`}\n        />\n      );\n      rects.push(rect);\n    }\n  }\n\n  return (\n    <svg\n      width={width}\n      style={style}\n      height={width}\n      viewBox={viewBox}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={`svg-icon ${className || \"\"}`}\n      xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n    >\n      <defs>\n        <marker\n          id=\"arrow\"\n          fill=\"white\"\n          viewBox=\"0 0 10 10\"\n          refX=\"5\"\n          refY=\"5\"\n          markerWidth=\"6\"\n          markerHeight=\"6\"\n          orient=\"auto-start-reverse\"\n        >\n          <path d=\"M 0 0 L 10 5 L 0 10 z\" />\n        </marker>\n      </defs>\n      <g id=\"group\" transform=\" rotate(-45 5 0)\">\n        <g>{rects}</g>\n        <polyline\n          points=\"-0.2,-0.4, -0.2,5.1, 5.3,5.1\"\n          fill=\"none\"\n          stroke=\"white\"\n          strokeWidth=\"0.1\"\n          markerStart=\"url(#arrow)\"\n          markerEnd=\"url(#arrow)\"\n        />\n        <text\n          x=\"2.5\"\n          y=\"6\"\n          fontSize=\"0.06em\"\n          textAnchor=\"middle\"\n          fill=\"white\"\n          fontWeight=\"bold\"\n        >\n          Corruption\n        </text>\n        <text\n          transform=\" rotate(90 0 0)\"\n          fill=\"white\"\n          x=\"2.5\"\n          y=\"1\"\n          fontSize=\"0.06em\"\n          textAnchor=\"middle\"\n          fontWeight=\"bold\"\n        >\n          Investment\n        </text>\n      </g>\n    </svg>\n  );\n};\n\nexport default SVG;\n","import React, { ReactDOM } from \"react\";\nimport { PieChart, Pie, Sector, Cell } from \"recharts\";\n\nconst DataTooltip = ({\n  name,\n  corruption,\n  investment,\n  corruption_color,\n  investment_color\n}) => {\n  const data_corruption = [\n    { name: \"Group A\", value: corruption },\n    { name: \"inverse\", value: 1 - corruption }\n  ];\n\n  const data_investment = [\n    { name: \"Group A\", value: investment },\n    { name: \"inverse\", value: 1 - investment }\n  ];\n\n  const COLORS1 = [corruption_color, \"rgb(100,100,100)\"];\n  const COLORS2 = [investment_color, \"rgb(100,100,100)\"];\n\n  return (\n    <div\n      className=\"dataTooltip\"\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\"\n      }}\n    >\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>{name}</div>\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n        <PieChart width={93} height={50}>\n          <Pie\n            data={data_corruption}\n            cx={16}\n            cy={16}\n            innerRadius={15}\n            outerRadius={20}\n            paddingAngle={0}\n            isAnimationActive={false}\n          >\n            {data_corruption.map((entry, index) => (\n              <Cell fill={COLORS1[index % COLORS1.length]} stroke=\"black\" />\n            ))}\n          </Pie>\n          <text x={21} y={17} dy={8} textAnchor=\"middle\" fill=\"White\">\n            {Number(corruption).toFixed(2)}\n          </text>\n\n          <Pie\n            data={data_investment}\n            cx={66}\n            cy={16}\n            innerRadius={15}\n            outerRadius={20}\n            paddingAngle={0}\n            isAnimationActive={false}\n          >\n            {data_investment.map((entry, index) => (\n              <Cell fill={COLORS2[index % COLORS2.length]} stroke=\"black\" />\n            ))}\n          </Pie>\n          <text x={71} y={17} dy={8} textAnchor=\"middle\" fill=\"White\">\n            {Number(investment).toFixed(2)}\n          </text>\n        </PieChart>\n      </div>\n    </div>\n  );\n};\n\n//ReactDOM.render(<SimplePieChart />, document.getElementById(\"container\"));\n\nexport default DataTooltip;\n","import React from \"react\";\n\nconst removeKeys = [\"CountryCode\", \"Country Name\", \"investment\"];\n\nexport default ({ countryCode, data }) => {\n  const countryData = data.find(country => country.CountryCode === countryCode);\n  return (\n    (countryCode && countryData && countryData[\"Country Name\"] && (\n      <div className=\"content Details\" heigth=\"300px\" width=\"500px\">\n        <h3>{countryData[\"Country Name\"]}</h3>\n        <table>\n          {Object.keys(countryData)\n            .filter(key => !removeKeys.includes(key))\n            .map(key => (\n              <tr>\n                <td>{key}</td>\n                <td>{countryData[key]}</td>\n              </tr>\n            ))}\n        </table>\n      </div>\n    )) ||\n    null\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { csv } from \"d3-fetch\";\n\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography,\n  Sphere,\n  Graticule,\n  Marker\n} from \"react-simple-maps\";\nimport rgbHex from \"rgb-hex\";\nimport Legend2d from \"./Legend2d\";\nimport Tooltip from \"./Tooltip\";\nimport Details from \"./Details\";\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\n// Green investment, pink corruption, blue both <- best one so far\nconst fillFunction = (corruption, investment) => {\n  return {\n    G: 255 - 255 * Number(corruption),\n    B: 255 - (155 * (Number(corruption) + Number(investment))) / 2,\n    R: 255 - 255 * Number(investment)\n  };\n};\n\nconst colorScale2D = (corruption, investment) => {\n  const color = fillFunction(corruption, investment);\n\n  const hex = rgbHex(color[\"R\"], color[\"G\"], color[\"B\"]);\n\n  return `rgb(${color[\"R\"]}, ${color[\"G\"]} , ${color[\"B\"]})`;\n};\n\nconst MapChart = ({\n  setTooltipContent,\n  dataset,\n  country,\n  setCountry,\n  data,\n  setData\n}) => {\n  useEffect(() => {\n    csv(`${process.env.PUBLIC_URL}/data/${dataset}`).then(data => {\n      const maxFunding = Math.max(\n        ...data.map(country => country[\"Funding USDm\"])\n      );\n      data.forEach(country => {\n        country.investment = country[\"Funding USDm\"] / maxFunding;\n      });\n      return setData(data);\n    });\n  }, [dataset]);\n\n  return (\n    <div className=\"Map\">\n      <ComposableMap\n        data-tip=\"\"\n        height={400}\n        projectionConfig={{\n          rotate: [0, 0, 0],\n          scale: 140\n        }}\n      >\n        <ZoomableGroup disablePanning={true}>\n          <Sphere stroke=\"#E4E5E6\" strokeWidth={0.3} />\n          <Graticule stroke=\"#E4E5E6\" strokeWidth={0.3} />\n          {data.length > 0 && (\n            <Geographies geography={geoUrl}>\n              {({ geographies }) =>\n                geographies.map(geo => {\n                  const d = data.find(\n                    s => s[\"CountryCode\"] === geo.properties.ISO_A3\n                  );\n                  return (\n                    <Geography\n                      key={geo.rsmKey}\n                      geography={geo}\n                      fill={\n                        d\n                          ? colorScale2D(d[\"Corruption risks\"], d[\"investment\"])\n                          : \"#F5F4F6\"\n                      }\n                      stroke=\"#EAEAEC\"\n                      onClick={() => {\n                        setCountry(geo.properties.ISO_A3);\n                      }}\n                      onMouseEnter={() => {\n                        setTooltipContent(\n                          <Tooltip\n                            name={geo.properties.NAME}\n                            corruption={\n                              d ? Number(d[\"Corruption risks\"]) : \"none\"\n                            }\n                            investment={d ? Number(d[\"investment\"]) : \"none\"}\n                            corruption_color=\"rgb(255, 0 , 177.5)\"\n                            investment_color=\"rgb(0, 255 , 177.5)\"\n                          />\n                        );\n                      }}\n                      onMouseLeave={() => {\n                        setTooltipContent(\"\");\n                      }}\n                      style={{\n                        default: {\n                          outline: \"none\"\n                        },\n                        hover: {\n                          fill: \"#F53\",\n                          outline: \"none\",\n                          cursor: \"pointer\"\n                        },\n                        pressed: {\n                          fill: \"#E42\",\n                          outline: \"none\"\n                        }\n                      }}\n                    />\n                  );\n                })\n              }\n            </Geographies>\n          )}\n          <Marker coordinates={[-150.006, -10.7128]}>\n            <Legend2d width={120} fillFunction={colorScale2D} />\n          </Marker>\n          <Marker coordinates={[0, 0]}>\n            <Details countryCode={country} data={data} />\n          </Marker>\n        </ZoomableGroup>\n      </ComposableMap>\n    </div>\n  );\n};\n\nexport default MapChart;\n","import React from \"react\";\n\nconst SingleStat = ({ data, label, displayDetails }) => {\n  const name = \"Country Name\";\n  return (\n    <div className=\"SingleStat\">\n      <h5>{label}</h5>\n      <ul>\n        {data.map(country => (\n          <li>{country[name]}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ({ data, displayDetails }) => {\n  const corruption = \"Corruption risks\";\n\n  const mostCorrupted = data\n    .sort((c1, c2) => (c1[corruption] <= c2[corruption] ? 1 : -1))\n    .slice(0, 5);\n  const mostInvested = data\n    .sort((c1, c2) => (c1.investment <= c2.investment ? 1 : -1))\n    .slice(0, 5);\n  const lessInvested = data\n    .sort((c1, c2) => (c1.investment >= c2.investment ? 1 : -1))\n    .slice(0, 5);\n\n  return (\n    <div className=\"content Stats\">\n      <SingleStat data={mostCorrupted} label=\"Highest corruption\" />\n      <SingleStat data={mostInvested} label=\"Highest investment\" />\n      <SingleStat data={lessInvested} label=\"Lowest investment\" />\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactTooltip from \"react-tooltip\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles.css\";\nimport MapChart from \"./components/MapChart\";\nimport Details from \"./components/Details\";\nimport Stats from \"./components/Stats\";\n\nimport { Tabs, Tab } from \"react-bootstrap\";\nconst upperFirst = string =>\n  string.charAt(0).toUpperCase() + string.substring(1);\nfunction App() {\n  const [content, setContent] = useState(\"\");\n  const [key, setKey] = useState(\"public\");\n  const [country, setCountry] = useState(\"\");\n  const [data, setData] = useState([]);\n\n  const sectors = [\"public\", \"education\", \"health\", \"business\", \"energy\"];\n  return (\n    <div>\n      <div className=\"page\">\n        <div className=\"Tabs\">\n          <Tabs\n            id=\"controlled-tab-example\"\n            activeKey={key}\n            onSelect={k => setKey(k)}\n          >\n            {sectors.map(sector => (\n              <Tab\n                key={sector}\n                eventKey={sector}\n                title={upperFirst(sector)}\n              ></Tab>\n            ))}\n          </Tabs>\n        </div>\n        <MapChart\n          setTooltipContent={setContent}\n          dataset={key + \".csv\"}\n          country={country}\n          setCountry={setCountry}\n          data={data}\n          setData={setData}\n        />\n        <Stats\n          country={country}\n          data={data}\n          displayDetails={countryCode => {\n            setCountry(countryCode);\n          }}\n        ></Stats>\n        <ReactTooltip>{content}</ReactTooltip>\n        <Details countryCode={country} data={data} />\n      </div>\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}